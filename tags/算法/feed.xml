<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>算法 on 百里求一的博客</title>
        <link>http://kooksee.github.io/tags/%E7%AE%97%E6%B3%95/</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
        
        <item>
            <title>python快速排序</title>
            <link>http://kooksee.github.io/blog/python%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://kooksee.github.io/blog/python%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;快速排序采用的思想是分治思想。
快速排序是找出一个元素（理论上可以随便找一个）作为基准(pivot),然后对数组进行分区操作,使基准左边元素的值都不大于基准值,基准右边的元素值 都不小于基准值，如此作为基准的元素调整到排序后的正确位置。递归快速排序，将其他n-1个元素也调整到排序后的正确位置。最后每个元素都是在排序后的正 确位置，排序完成。所以快速排序算法的核心算法是分区操作，即如何调整基准的位置以及调整返回基准的最终位置以便分治递归。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def quickSort(L, low, high):
    i = low
    j = high

    if i &amp;gt;= j:
        return L

    key = L[low]
    while i &amp;lt; j:
        while i &amp;lt; j and L[j] &amp;gt;= key:
            j = j - 1
        L[i] = L[j]
        while i &amp;lt; j and L[i] &amp;lt;= key:
            i = i + 1
        L[j] = L[i]
    L[i] = key
    quickSort(L, low, i - 1)
    quickSort(L, j + 1, high)
    return L

L = [1, 2, 5, 1, 3, 6, 2, 8, 11, 33, 22]
print quickSort(L, 0, len(L) - 1)

--------------------
#下面的算法多做了一步交换大小,所以没有上面的算法好
def sub_sort(array,low,high):
    key = array[low]
    while low &amp;lt; high:
        while low &amp;lt; high and array[high] &amp;gt;= key:
            high -= 1
        while low &amp;lt; high and array[high] &amp;lt; key:
            array[low] = array[high]
            low += 1
            array[high] = array[low]
    array[low] = key
    return low

def quick_sort(array,low,high):
     if low &amp;lt; high:
        key_index = sub_sort(array,low,high)
        quick_sort(array,low,key_index)
        quick_sort(array,key_index+1,high)
---------------------
import sys
def partion(array, p, r):
    x = array[r]
    i = p - 1
    for j in range(p, r):
        if (array[j] &amp;lt; x):
            i+=1
            array[j], array[i] = array[i], array[j]
    i+=1
    array[i], array[r] = array[r], array[i]
    return i
def quick_sort(array, p, r):
    if p &amp;lt; r:
        q = partion(array, p, r)
        quick_sort(array, p, q - 1)
        quick_sort(array, q + 1, r)
---------------
#下面的算法只用了一行代码就搞定了,真是极客

def quick_sort(ls):
    return [] if ls == [] else quick_sort([y for y in ls[1:] if y &amp;lt; ls[0]]) + [ls[0]] + quick_sort([y for y in ls[1:] if y &amp;gt;= ls[0]])
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;分析
快速排序的时间主要耗费在划分操作上，对长度为k的区间进行划分，共需k-1次关键字的比较。
最坏情况是每次划分选取的基准都是当前无序区中关键字最小(或最大)的记录，划分的结果是基准左边的子区间为空(或右边的子区间为空)，而划分所得的另一个非空的子区间中记录数目，仅仅比划分前的无序区中记录个数减少一个。时间复杂度为O(n*n)
在最好情况下，每次划分所取的基准都是当前无序区的&amp;rdquo;中值&amp;rdquo;记录，划分的结果是基准的左、右两个无序子区间的长度大致相等。总的关键字比较次数：O(nlgn)
尽管快速排序的最坏时间为O(n2)，但就平均性能而言，它是基于关键字比较的内部排序算法中速度最快者，快速排序亦因此而得名。它的平均时间复杂度为O(nlgn)。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
        <item>
            <title>有两个序列a,b，大小都为n,序列元素的值任意整数，无序；要求：通过交换a,b 中的元素，使[序列a 元素的和]与[序列b 元素的和]之间的差最小</title>
            <link>http://kooksee.github.io/blog/%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%BA%8F%E5%88%97a,b%EF%BC%8C%E5%A4%A7%E5%B0%8F%E9%83%BD%E4%B8%BAn,%E5%BA%8F%E5%88%97%E5%85%83%E7%B4%A0%E7%9A%84%E5%80%BC%E4%BB%BB%E6%84%8F%E6%95%B4%E6%95%B0%EF%BC%8C%E6%97%A0%E5%BA%8F%EF%BC%9B%E8%A6%81%E6%B1%82%EF%BC%9A%E9%80%9A%E8%BF%87%E4%BA%A4%E6%8D%A2a,b%20%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E4%BD%BF%5B%E5%BA%8F%E5%88%97a%20%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C%5D%E4%B8%8E%5B%E5%BA%8F%E5%88%97b%20%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C%5D%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E6%9C%80%E5%B0%8F%E3%80%82/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://kooksee.github.io/blog/%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%BA%8F%E5%88%97a,b%EF%BC%8C%E5%A4%A7%E5%B0%8F%E9%83%BD%E4%B8%BAn,%E5%BA%8F%E5%88%97%E5%85%83%E7%B4%A0%E7%9A%84%E5%80%BC%E4%BB%BB%E6%84%8F%E6%95%B4%E6%95%B0%EF%BC%8C%E6%97%A0%E5%BA%8F%EF%BC%9B%E8%A6%81%E6%B1%82%EF%BC%9A%E9%80%9A%E8%BF%87%E4%BA%A4%E6%8D%A2a,b%20%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E4%BD%BF%5B%E5%BA%8F%E5%88%97a%20%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C%5D%E4%B8%8E%5B%E5%BA%8F%E5%88%97b%20%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C%5D%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E6%9C%80%E5%B0%8F%E3%80%82/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;有两个序列a,b，大小都为n,序列元素的值任意整数，无序；要求：通过交换a,b 中的元素，使[序列a 元素的和]与[序列b 元素的和]之间的差最小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如:
var a = [100,99,98,1,2, 3];
var b = [1, 2, 3, 4,5,40];&lt;/p&gt;

&lt;p&gt;最后的结果为：
var a = [1,99,98,1,2,2];
var b = [100, 3,3,4,5,40];&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;思路一：
首先先计算a,b中元素和之间的差绝对值ABDis，然后逐一的把a中的元素和b中的任一元素作比较，如果它们交换后的差值绝对值ABTempDis小于原来的值ABDis，那么就把a,b交换，并重新计算a和b的绝对值，这种动作反复的进行，直到a中任一的元素都不能和b中的任一元素交换为止。（其实是穷举法）&lt;/p&gt;

&lt;p&gt;思路二：
当前数组a和数组b的和之差为A = sum(a) - sum(b)，a的第i个元素和b的第j个元素交换后，a和b的和之差为
 A&amp;rsquo; = sum(a) - a[i] + b[j] - （sum(b) - b[j] + a[i])
     = sum(a) - sum(b) - 2 (a[i] - b[j])
      = A - 2 (a[i] - b[j])
    设x = a[i] - b[j]，那么
A&amp;rsquo;  = |A - 2x|，当然A&amp;rsquo; 越小也好，所以当x 在 (0,A)之间时，做这样的交换才能使得交换后的a和b的和之差变小，x越接近A/2效果越好,如果找不到在(0,A)之间的x，则当前的a和b就是答案。
所以算法大概如下：在a和b中寻找使得x在(0,A)之间并且最接近A/2的i和j，交换相应的i和j元素，重新计算A后，重复前面的步骤直至找不到(0,A)之间的x为止。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#思路是有等长的两个列表a,b;a,b组成一个大列表_list然后从大到小排序;求出列表a,b各自的和s1,s2,然后比较;如果s1,s2的差值大于_list中的最大值,那么列表和小的就加上这个最大值,而列表和大的就加上_list的最小值;如果s1,s2的差值小于_list中的最大值,那么列表和小的就加上这个最大值,而列表和大的就加上_list的次大值;

a = [1,2,3,4,5,6,7];
b = [8,9,11,1,33,4,5,6];

source = a + b
source.sort(reverse=True)
print source

while True:
    s1,s2 = sum(m1),sum(m2)
    if s1 &amp;gt; s2:
        if s1 - s2 &amp;gt;= source[0]:
            m2.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
            m1.append(source.pop() if len(source) &amp;gt;=1 else 0)
        else:
            m2.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
            m1.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
    else:
        if s2 - s1 &amp;gt;= source[0]:
            m1.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
            m2.append(source.pop() if len(source) &amp;gt;=1 else 0)
        else:
            m1.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
            m2.append(source.pop(0) if len(source) &amp;gt;=1 else 0)
    print m1,m2
    if len(source) == 0:
        break
print sum(m1)-sum(m2)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>机器学习之K近邻算法（KNN)</title>
            <link>http://kooksee.github.io/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BK%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%EF%BC%88KNN%EF%BC%89/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://kooksee.github.io/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BK%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%EF%BC%88KNN%EF%BC%89/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;苛求真理的欲望让我想要了解算法的本质，于是我开始了机械学习的算法之旅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from numpy import *  
import operator  
from collections import Counter

#KNN需要测试集，训练集，标签和k值
#测试集：你需要测试的数据
#训练集：给定的标准数据
#标签：每个标准数据的类别
#k值 ：测试集和训练集相比较下前K个最相识的训练集的值


# 用KNN算法找出测试集的类别
#1，求出已知类别训练集中的点与当前点之间的距离
#2，对所求距离以此递增排序
#3，选取与当前点距离最小的k个点
#4，确定前k个点所在类别的出现频率
#5，返回前k个点出现频率最高的类别作为当前点的预测分类

def kNNClassify(testSet, trainSet, labels, k=3):  
    rows = trainSet.shape[0] #shape[0]得到训练集的行数


    #求距离
    distSet = tile(testSet, (rows, 1)) - trainSet #得到距离矩阵
    distance = sum(distSet ** 2 , axis = 1) ** 0.5 # 求出距离

    #排序     
    #得到排序后数据原位置的下标，排序后位置是不变的
    #从而使得排序后的结果和trainSet的标签一一对应
    #然后就可以通过排序结果反向得到标签值
    sortedDistIndices = argsort(distance)


    #选取k个最小值
    classCount = Counter()# 保存类别

    #记录k值内相同标签出现的次数
    [classCount.update([labels[sortedDistIndices[i]]]) for i in xrange(k)]

    ## 得到出现次数最多的标签类别
    return sorted(classCount.iteritems(), key=lambda d:d[1], reverse = True )[0][0]


if __name__ == &#39;__main__&#39;:

    #然后我们在命令行中测试
    trainSet = array([
            [1.0, 0.9],
            [1.0, 1.0],
            [0.1, 0.2],
            [0.0, 0.1]])  
    labels = [&#39;A&#39;, &#39;A&#39;, &#39;B&#39;,&#39;B&#39;] # 4个标签,2种类别

    testSet = array([1.2, 1.0])  

    label = kNNClassify(testSet, trainSet, labels, k=3)  
    print &amp;quot;输入:&amp;quot;, testSet, &amp;quot;分类: &amp;quot;, label  

    testSet = array([0.1, 0.3])  
    label = kNNClassify(testSet, trainSet, labels, k=3)
    print &amp;quot;输入:&amp;quot;, testSet, &amp;quot;分类: &amp;quot;, label    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;输入: [ 1.2  1. ] 分类:  A
输入: [ 0.1  0.3] 分类:  B
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>欢迎使用 Cmd - 在线 Markdown 编辑阅读器</title>
            <link>http://kooksee.github.io/blog/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%20Cmd%20-%20%E5%9C%A8%E7%BA%BF%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://kooksee.github.io/blog/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%20Cmd%20-%20%E5%9C%A8%E7%BA%BF%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8/</guid>
            <description>

&lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，&lt;strong&gt;Cmd Markdown&lt;/strong&gt; 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。&lt;/p&gt;

&lt;p&gt;您可以使用 Cmd Markdown：
&amp;gt; * 整理知识，学习笔记
&amp;gt; * 发布日记，杂文，所见所想
&amp;gt; * 撰写发布技术文稿（代码支持）
&amp;gt; * 撰写发布学术论文（LaTeX 公式支持）&lt;/p&gt;

&lt;p&gt;请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 &lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; &lt;strong&gt;新文稿&lt;/strong&gt; 或者使用快捷键 &lt;code&gt;Ctrl+Alt+N&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;什么是-markdown:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;什么是 Markdown&lt;/h2&gt;

&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字，更棒的是，它还可以&lt;/p&gt;

&lt;h3 id=&#34;书写一个质能守恒公式-latex:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;书写一个质能守恒公式&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e678070b5a6ed6a3db73623232c2bc02:LaTeX&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e678070b5a6ed6a3db73623232c2bc02:LaTeX&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;$$E=mc^2$$&lt;/p&gt;

&lt;h3 id=&#34;高亮一段代码-code:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;高亮一段代码&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e678070b5a6ed6a3db73623232c2bc02:code&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e678070b5a6ed6a3db73623232c2bc02:code&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@requires_authorization
class SomeClass:
    pass

if __name__ == &#39;__main__&#39;:
    # A comment
    print &#39;hello world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;高效绘制-流程图-https-www-zybuluo-com-mdeditor-url-https-www-zybuluo-com-static-editor-md-help-markdown-7-流程图:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;高效绘制 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图&#34;&gt;流程图&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-flow&#34;&gt;st=&amp;gt;start: Start
op=&amp;gt;operation: Your Operation
cond=&amp;gt;condition: Yes or No?
e=&amp;gt;end

st-&amp;gt;op-&amp;gt;cond
cond(yes)-&amp;gt;e
cond(no)-&amp;gt;op
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;高效绘制-序列图-https-www-zybuluo-com-mdeditor-url-https-www-zybuluo-com-static-editor-md-help-markdown-8-序列图:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;高效绘制 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图&#34;&gt;序列图&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-seq&#34;&gt;Alice-&amp;gt;Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob--&amp;gt;Alice: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;绘制表格:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;绘制表格&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;更详细语法说明:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;更详细语法说明&lt;/h3&gt;

&lt;p&gt;想要查看更详细的语法说明，可以参考我们准备的 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&#34;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;，进阶用户可以参考 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册&#34;&gt;Cmd Markdown 高阶语法手册&lt;/a&gt; 了解更多高级功能。&lt;/p&gt;

&lt;p&gt;总而言之，不同于其它 &lt;em&gt;所见即所得&lt;/em&gt; 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。&lt;strong&gt;Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。&lt;/strong&gt; 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;什么是-cmd-markdown:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;什么是 Cmd Markdown&lt;/h2&gt;

&lt;p&gt;您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 &lt;strong&gt;编辑/发布/阅读&lt;/strong&gt; Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。&lt;/p&gt;

&lt;h3 id=&#34;1-实时同步预览:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;1. 实时同步预览&lt;/h3&gt;

&lt;p&gt;我们将 Cmd Markdown 的主界面一分为二，左边为&lt;strong&gt;编辑区&lt;/strong&gt;，右边为&lt;strong&gt;预览区&lt;/strong&gt;，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！&lt;/p&gt;

&lt;h3 id=&#34;2-编辑工具栏:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;2. 编辑工具栏&lt;/h3&gt;

&lt;p&gt;也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 &lt;strong&gt;编辑区&lt;/strong&gt; 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-editor.png&#34; alt=&#34;tool-editor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-编辑模式:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;3. 编辑模式&lt;/h3&gt;

&lt;p&gt;完全心无旁骛的方式编辑文字：点击 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 最右测的拉伸按钮或者按下 &lt;code&gt;Ctrl + M&lt;/code&gt;，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！&lt;/p&gt;

&lt;h3 id=&#34;4-实时的云端文稿:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;4. 实时的云端文稿&lt;/h3&gt;

&lt;p&gt;为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 的最右侧提示 &lt;code&gt;已保存&lt;/code&gt; 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。&lt;/p&gt;

&lt;h3 id=&#34;5-离线模式:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;5. 离线模式&lt;/h3&gt;

&lt;p&gt;在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。&lt;/p&gt;

&lt;h3 id=&#34;6-管理工具栏:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;6. 管理工具栏&lt;/h3&gt;

&lt;p&gt;为了便于管理您的文稿，在 &lt;strong&gt;预览区&lt;/strong&gt; 的顶部放置了如下所示的 &lt;strong&gt;管理工具栏&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-manager.jpg&#34; alt=&#34;tool-manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过管理工具栏可以：&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;icon-share&#34;&gt;&lt;/i&gt; 发布：将当前的文稿生成固定链接，在网络上发布，分享
&lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; 新建：开始撰写一篇新的文稿
&lt;i class=&#34;icon-trash&#34;&gt;&lt;/i&gt; 删除：删除当前的文稿
&lt;i class=&#34;icon-cloud&#34;&gt;&lt;/i&gt; 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地
&lt;i class=&#34;icon-reorder&#34;&gt;&lt;/i&gt; 列表：所有新增和过往的文稿都可以在这里查看、操作
&lt;i class=&#34;icon-pencil&#34;&gt;&lt;/i&gt; 模式：切换 普通/Vim/Emacs 编辑模式&lt;/p&gt;

&lt;h3 id=&#34;7-阅读工具栏:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;7. 阅读工具栏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-reader.jpg&#34; alt=&#34;tool-manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 &lt;strong&gt;预览区&lt;/strong&gt; 右上角的 &lt;strong&gt;阅读工具栏&lt;/strong&gt;，可以查看当前文稿的目录并增强阅读体验。&lt;/p&gt;

&lt;p&gt;工具栏上的五个图标依次为：&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;icon-list&#34;&gt;&lt;/i&gt; 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落
&lt;i class=&#34;icon-chevron-sign-left&#34;&gt;&lt;/i&gt; 视图：互换左边编辑区和右边预览区的位置
&lt;i class=&#34;icon-adjust&#34;&gt;&lt;/i&gt; 主题：内置了黑白两种模式的主题，试试 &lt;strong&gt;黑色主题&lt;/strong&gt;，超炫！
&lt;i class=&#34;icon-desktop&#34;&gt;&lt;/i&gt; 阅读：心无旁骛的阅读模式提供超一流的阅读体验
&lt;i class=&#34;icon-fullscreen&#34;&gt;&lt;/i&gt; 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境&lt;/p&gt;

&lt;h3 id=&#34;8-阅读模式:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;8. 阅读模式&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;阅读工具栏&lt;/strong&gt; 点击 &lt;i class=&#34;icon-desktop&#34;&gt;&lt;/i&gt; 或者按下 &lt;code&gt;Ctrl+Alt+M&lt;/code&gt; 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。&lt;/p&gt;

&lt;h3 id=&#34;9-标签-分类和搜索:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;9. 标签、分类和搜索&lt;/h3&gt;

&lt;p&gt;在编辑区任意行首位置输入以下格式的文字可以标签当前文档：&lt;/p&gt;

&lt;p&gt;标签： 未分类&lt;/p&gt;

&lt;p&gt;标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/file-list.png&#34; alt=&#34;file-list&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;10-文稿发布和分享:e678070b5a6ed6a3db73623232c2bc02&#34;&gt;10. 文稿发布和分享&lt;/h3&gt;

&lt;p&gt;在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 &lt;i class=&#34;icon-share&#34;&gt;&lt;/i&gt; (Ctrl+Alt+P) 发布这份文档给好友吧！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;再一次感谢您花费时间阅读这份欢迎稿，点击 &lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！&lt;/p&gt;

&lt;p&gt;作者 &lt;a href=&#34;http://weibo.com/ghosert&#34;&gt;@ghosert&lt;/a&gt;&lt;br /&gt;
2014 年 07月 07日&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e678070b5a6ed6a3db73623232c2bc02:LaTeX&#34;&gt;支持 &lt;strong&gt;LaTeX&lt;/strong&gt; 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 &lt;a href=&#34;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;MathJax&lt;/a&gt; 参考更多使用方法。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e678070b5a6ed6a3db73623232c2bc02:LaTeX&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e678070b5a6ed6a3db73623232c2bc02:code&#34;&gt;代码高亮功能支持包括 Java, Python, JavaScript 在内的，&lt;strong&gt;四十一&lt;/strong&gt;种主流编程语言。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e678070b5a6ed6a3db73623232c2bc02:code&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
