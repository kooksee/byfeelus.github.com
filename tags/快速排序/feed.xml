<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>快速排序 on 百里求一的博客</title>
        <link>http://kooksee.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
        <language>zh-CN</language>
        <author>CoderZh</author>
        <rights>Copyright (c) 2015, CoderZh; all rights reserved.</rights>
        <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
        
        <item>
            <title>python快速排序</title>
            <link>http://kooksee.github.io/blog/python%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
            <author>CoderZh</author>
            <guid>http://kooksee.github.io/blog/python%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;快速排序采用的思想是分治思想。
快速排序是找出一个元素（理论上可以随便找一个）作为基准(pivot),然后对数组进行分区操作,使基准左边元素的值都不大于基准值,基准右边的元素值 都不小于基准值，如此作为基准的元素调整到排序后的正确位置。递归快速排序，将其他n-1个元素也调整到排序后的正确位置。最后每个元素都是在排序后的正 确位置，排序完成。所以快速排序算法的核心算法是分区操作，即如何调整基准的位置以及调整返回基准的最终位置以便分治递归。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def quickSort(L, low, high):
    i = low
    j = high

    if i &amp;gt;= j:
        return L

    key = L[low]
    while i &amp;lt; j:
        while i &amp;lt; j and L[j] &amp;gt;= key:
            j = j - 1
        L[i] = L[j]
        while i &amp;lt; j and L[i] &amp;lt;= key:
            i = i + 1
        L[j] = L[i]
    L[i] = key
    quickSort(L, low, i - 1)
    quickSort(L, j + 1, high)
    return L

L = [1, 2, 5, 1, 3, 6, 2, 8, 11, 33, 22]
print quickSort(L, 0, len(L) - 1)

--------------------
#下面的算法多做了一步交换大小,所以没有上面的算法好
def sub_sort(array,low,high):
    key = array[low]
    while low &amp;lt; high:
        while low &amp;lt; high and array[high] &amp;gt;= key:
            high -= 1
        while low &amp;lt; high and array[high] &amp;lt; key:
            array[low] = array[high]
            low += 1
            array[high] = array[low]
    array[low] = key
    return low

def quick_sort(array,low,high):
     if low &amp;lt; high:
        key_index = sub_sort(array,low,high)
        quick_sort(array,low,key_index)
        quick_sort(array,key_index+1,high)
---------------------
import sys
def partion(array, p, r):
    x = array[r]
    i = p - 1
    for j in range(p, r):
        if (array[j] &amp;lt; x):
            i+=1
            array[j], array[i] = array[i], array[j]
    i+=1
    array[i], array[r] = array[r], array[i]
    return i
def quick_sort(array, p, r):
    if p &amp;lt; r:
        q = partion(array, p, r)
        quick_sort(array, p, q - 1)
        quick_sort(array, q + 1, r)
---------------
#下面的算法只用了一行代码就搞定了,真是极客

def quick_sort(ls):
    return [] if ls == [] else quick_sort([y for y in ls[1:] if y &amp;lt; ls[0]]) + [ls[0]] + quick_sort([y for y in ls[1:] if y &amp;gt;= ls[0]])
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;分析
快速排序的时间主要耗费在划分操作上，对长度为k的区间进行划分，共需k-1次关键字的比较。
最坏情况是每次划分选取的基准都是当前无序区中关键字最小(或最大)的记录，划分的结果是基准左边的子区间为空(或右边的子区间为空)，而划分所得的另一个非空的子区间中记录数目，仅仅比划分前的无序区中记录个数减少一个。时间复杂度为O(n*n)
在最好情况下，每次划分所取的基准都是当前无序区的&amp;rdquo;中值&amp;rdquo;记录，划分的结果是基准的左、右两个无序子区间的长度大致相等。总的关键字比较次数：O(nlgn)
尽管快速排序的最坏时间为O(n2)，但就平均性能而言，它是基于关键字比较的内部排序算法中速度最快者，快速排序亦因此而得名。它的平均时间复杂度为O(nlgn)。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
